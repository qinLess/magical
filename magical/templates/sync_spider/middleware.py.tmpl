# -*- coding: utf-8 -*-
"""
-------------------------------------------------
    Author: qinLess
    File: middleware.py
    Time: ${create_time}
-------------------------------------------------
    Change Activity: ${create_time}
-------------------------------------------------
    Desc:
"""
import random
import time

import requests

from magical.sync_spider.extends_module.base_module.downloader import DownloaderMiddleware


# ------------------------------------------------default middleware------------------------------------------------


class DuplicateMiddleware(DownloaderMiddleware):
    """去重中间件"""

    def __init__(self, spider):
        super().__init__(spider)

    def process_request(self, request):
        if request.meta.get('is_filter'):
            # 0 == 不存在，1 == 存在
            if self.duplicate.get(**request.meta['filter_info']) != 0:
                return None

        return request

    def process_response(self, request, response):

        if response and request.meta.get('is_filter'):
            # 请求成功添加到，去重种子列表里。 0 == 已存在，1 == 不存在，添加成功
            if self.duplicate.add(**request.meta['filter_info']) == 1:
                pass

        return response


class HeadersMiddleware(DownloaderMiddleware):
    """请求头处理中间件"""

    def __init__(self, spider):
        super().__init__(spider)

    def process_request(self, request):
        request.headers.update({'Connection': 'close'})
        return request


class ProxyMiddleware(DownloaderMiddleware):
    """代理IP中间件"""

    def __init__(self, spider):
        super().__init__(spider)

        self.proxy.proxy_handler(num=1)

    def process_request(self, request):
        request.meta['proxy'] = self.proxy.get_proxy()
        return request

    def process_response(self, request, response):
        return response

    def process_exception(self, request, exception):
        self.logger.error(f'ProxyMiddleware.process_exception: {exception}, request: {request}', exc_info=True)

        if isinstance(
            exception,
            (
                requests.exceptions.ConnectionError,
                requests.exceptions.ConnectTimeout,
                requests.exceptions.ReadTimeout,
                requests.exceptions.Timeout,
            )
        ):
            self.logger.error(f'ProxyMiddleware - 请求异常重试 - request: {request}')
            time.sleep(random.randint(3, 5))
            self.proxy.proxy_handler(request, num=1)
            return self._retry(request)

        elif isinstance(exception, requests.exceptions.HTTPError):
            self.logger.error(f'ProxyMiddleware - requests.exceptions.HTTPError - request: {request}')
            return None

        elif isinstance(exception, requests.exceptions.ChunkedEncodingError):
            self.logger.error(f'ProxyMiddleware - requests.exceptions.ChunkedEncodingError - request: {request}')
            return None

        elif isinstance(exception, requests.exceptions.SSLError):
            self.logger.error(f'ProxyMiddleware - requests.exceptions.SSLError - request: {request}')
            return None

        return exception


# -------------------------------------------------spider middleware-------------------------------------------------


class ${SpiderName}Middleware(DownloaderMiddleware):

    def __init__(self, spider):
        super().__init__(spider)

    def process_request(self, request):
        return request

    def process_response(self, request, response):
        if not request.use_middleware:
            return response

        return response

    def process_exception(self, request, exception):
        self.logger.error(f'${SpiderName}Middleware.process_exception: {exception}, request: {request}')
        return exception
